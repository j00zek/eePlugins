#contains own functions to minimize modifications of the oryginal script
import e2kodi__init__ # aby zainicjowac sciezki i nie musiec zmieniac czegos w kodzie

import os, sys
from urllib.parse import parse_qsl

from xbmcE2 import *

import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import xbmcvfs

from resources.lib.plugin import run

params = dict(parse_qsl(sys.argv[2][1:]))
#print(params)

__addon__ = xbmcaddon.Addon(id='plugin.video.skyott')

data_dir = xbmcvfs.translatePath(__addon__.getAddonInfo('profile'))

if __name__ == '__main__':
    action = params.get('action', '')
    if action=='login' and params['method'] == 'key' and not os.path.exists(data_dir + "skyshowtime.key"):
        info = ''
        info += '-Wejdź na stronę https://github.com/Paco8/SkyExtractCookie\n'
        info += '-Pobierz SkyExtractCookie\n'
        info += '-Uruchom\n'
        info += '-zaloguj się do serwisu\n'
        info += '-skopiuj wygenerowany plik skyshowtime.key do katalogu /etc/e2kodi/skyott'
        xbmcgui.Dialog().notification('SkyShowtime / PeacockTV\n', info, xbmcgui.NOTIFICATION_INFO, time = 20)
    elif action=='logOut':
        if os.path.exists(data_dir + "skyshowtime.key"):
            os.remove(data_dir + "skyshowtime.key")
    else:
        if action=='play':
            import threading
            import subprocess
            def run_script():
                addon_dir = xbmcvfs.translatePath(__addon__.getAddonInfo('path'))
                subprocess.run(["/usr/bin/python", addon_dir + "service.py"])
            # Create and start the thread
            thread = threading.Thread(target=run_script)
            thread.start()
            # Optionally wait for the thread to finish
            #thread.join()
        run()
