#contains own functions to minimize modifications of the oryginal script
import e2kodi__init__ # aby zainicjowac sciezki i nie musiec zmieniac czegos w kodzie

import os, sys
from urllib.parse import parse_qsl

from xbmcE2 import *

import xbmc
import xbmcaddon
import xbmcgui
import xbmcplugin
import xbmcvfs

params = dict(parse_qsl(sys.argv[2][1:]))

mode = params.get('mode', None)

__addon__ = xbmcaddon.Addon()

if mode is None:
    print('brak parametrów uruchomieniowych :(')
elif mode=='login':
    from addon import login
    login(device=True)
    
elif mode=='logout':
        data_dir = xbmcvfs.translatePath(__addon__.getAddonInfo('profile'))
        if os.path.exists(data_dir + "token.json"):
            os.remove(data_dir + "token.json")
elif mode=='listE2B':
    from addon import live #def live(id=None, restart=0, page=0):
    KodiDirectoryItemsPath = os.path.join(working_dir, 'xbmcplugin_DirectoryItems')
    dataE2 = '' #j00zek for E2 bouquets
    cleanWorkingDir()
    live(page=0)
    nextPage=1
    while os.path.exists(KodiDirectoryItemsPath) and nextPage < 30:
        xbmcgui.Dialog().notification('waipu', 'Pobieram listę kanałów ze strony %s' % nextPage, xbmcgui.NOTIFICATION_INFO, time = 7)
        if os.path.exists(KodiDirectoryItemsPath):
           with open(KodiDirectoryItemsPath, 'r') as inFile:
                for line in inFile:
                    try:
                        lineDict = json.loads(line)
                        title = cleanKodiText(lineDict.get('label', '').split('[/B]')[0])
                        url =  r"http%3a//e2kodiPlayer/plugin.video.waipu/addon.py" + r"?%s" % lineDict.get('url', '').split('?')[1]
                        if not '&page=' in url:
                            dataE2 += "%s:%s\n" % (url, title )
                    except Exception as e:
                        print(e)
        cleanWorkingDir()
        live(page=nextPage)
        nextPage+=1
    if dataE2 != '':
        xbmcgui.Dialog().notification('RTL+ - Webversion', 'Generuję listę E2B...', xbmcgui.NOTIFICATION_INFO)
        with open(os.path.join(working_dir, 'iptv.e2b'), "w") as file:
            file.write(dataE2)
elif mode=='getEPG':
    if os.path.exists('/etc/enigma2/userbouquet.waipu.tv'):
        from addon import *
        from datetime import datetime, timezone, timedelta
        import json
        import requests
        
        channelsEPGDict = {}
        datesList = [datetime.now(), datetime.now() + timedelta(days=1)]
        with open('/etc/enigma2/userbouquet.waipu.tv', 'r') as inFile:
            for line in inFile:
                if line.startswith('#SERVICE '):
                    stationId = line.split('id=')[1].split(':')[0]
                    print(stationId)
                    timeslots = requests.get('https://epg-cache.waipu.tv/api/grid/info').json()
                    timeslots = timeslots['timeSlots']
                    details = []
                    for date in datesList:
                        date = date.strftime("%Y-%m-%d")
                        for timeslot in timeslots:
                            url = f'https://epg-cache.waipu.tv/api/grid/{stationId}/{date}T{timeslot}'
                            #print(url)
                            slotDetails = requests.get(url).json()
                            details += slotDetails
                    channelsEPGDict[stationId] = details
                    with open("/tmp/e2kEPG.json", "w") as json_file:
                        json.dump(channelsEPGDict, json_file, indent=2)
    else:
        print('nie znaleziono wygenerowanego pakietu')