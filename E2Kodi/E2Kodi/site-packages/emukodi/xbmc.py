import os.path, traceback
from os import system
from urllib.parse import urlparse
from io import StringIO
import json

from typing import Union, List, Dict, Tuple, Optional

#https://github.com/romanvm/Kodistubs/blob/master/xbmc.py

from emukodi import xbmcaddon, xbmcplugin, xbmcE2
#import emukodi.xbmcgui as xbmc_gui not required?

import sys
pythonVersion = '%s.%s' % (sys.version_info.major, sys.version_info.minor)


# xbmc/PlayListPlayer.h
PLAYLIST_NONE = -1
PLAYLIST_MUSIC = 0
PLAYLIST_VIDEO = 1
PLAYLIST_PICTURE = 2

# xbmc/cores/playercorefactory/PlayerCoreFactory.h
PLAYER_CORE_AUTO = 0 # EPC_NONE
PLAYER_CORE_DVDPLAYER = 1 # EPC_DVDPLAYER
PLAYER_CORE_MPLAYER = 2 # EPC_MPLAYER
PLAYER_CORE_PAPLAYER = 3 # EPC_PAPLAYER

# xbmc/storage/IoSupport.h
TRAY_OPEN = 16
DRIVE_NOT_READY = 1
TRAY_CLOSED_NO_MEDIA = 64
TRAY_CLOSED_MEDIA_PRESENT = 96

# xbmc/utils/log.h
LOGDEBUG = 0
LOGINFO = 1
LOGNOTICE = 2
LOGWARNING = 3
LOGERROR = 4
LOGSEVERE = 5
LOGFATAL = 6
LOGNONE = 7

# xbmc/cores/VideoRenderers/RenderCapture.h
CAPTURE_STATE_WORKING = 0 # CAPTURESTATE_WORKING
CAPTURE_STATE_DONE = 3 # CAPTURESTATE_DONE
CAPTURE_STATE_FAILED = 4 # CAPTURESTATE_FAILED
CAPTURE_FLAG_CONTINUOUS = 1 # CAPTUREFLAG_CONTINUOUS
CAPTURE_FLAG_IMMEDIATELY = 2 # CAPTUREFLAG_IMMEDIATELY

SERVER_AIRPLAYSERVER = 2
SERVER_EVENTSERVER = 6
SERVER_JSONRPCSERVER = 3
SERVER_UPNPRENDERER = 4
SERVER_UPNPSERVER = 5
SERVER_WEBSERVER = 1
SERVER_ZEROCONF = 7

abortRequested = False

ISO_639_0 = 0 # full language
ISO_639_1 = 1 # two letter code
ISO_639_2 = 2 # three letter code

def log(msg, level=None):
    """Write a string to XBMC's log file."""
    xbmcE2.write_log(msg, level)

output = log # alias for backward compatility

def shutdown():
    """Shutdown the xbox."""
    pass

def restart():
    """Restart the xbox."""
    pass

def executescript(script):
    """Execute a python script."""
    log("xbmc.executescript(%s)" % script)
    runScript(script)

def executebuiltinX(function):
    """Execute a built in XBMC function."""
    pass

#plugin://plugin.video.covenant/?action=moviePage&url=http%3A%2F%2Fapi.trakt.tv%2Fsearch%2Fmovie%3Flimit%3D20%26page%3D1%26query%3Dwonder%2Bwoman
def executebuiltin(function):
    """Execute a built in XBMC function."""
    if "Container.Update" in function:
        log("xbmc.executebuiltin('Container.Update') requested, do nothing")
    elif "Container.Refresh" in function:
        log("xbmc.executebuiltin('Container.Refresh') requested, do nothing")
    else:    
        n1 = function.find("(", 0)
        n2 = function.find(")", n1)
        url = function[(n1+1):n2]
        n3 = url.find("?", 0)
        arg3 = url[n3:]
        arg1 = sys.argv[0]
        arg2 = sys.argv[1]  
        cmd = "python " + arg1 + " " + arg2 + " '" + arg3 + "' &"
        log("possible... xbmc.executebuiltin(%s) cmd = '%s'" % (function, cmd) )
        #os.system(cmd)
        
def executehttpapi(httpcommand):
    """Execute an HTTP API command."""
    return ""

def executeJSONRPC(jsonrpccommand):
    """Execute an JSONRPC command."""
    return ""

#def sleep(time):
#    """Sleeps for 'time' msec."""
#    system("sleep 0")
def sleep(ctime):
    """Sleeps for 'time' msec."""
    import time
    log("sleep(%s)" % ctime)
    time.sleep(ctime/1000) ##time passed by milliseconds 
    

def getLocalizedString(id):
    """Returns a localized 'unicode string'."""
    return u""

def getSkinDir():
    """Returns the active skin directory as a string."""
    return ""

def getLanguage(ISO_639 = 1):
    """Returns the active language as a string."""
    if ISO_639 == 0:
        return 'English'
    elif ISO_639 == 2:
        return 'eng'
    else:
        return 'en'


def getIPAddress():
    """Returns the current ip address as a string."""
    return ""

def getDVDState():
    """Returns the dvd state as an integer."""
    return 0

def getFreeMem():
    """Returns the amount of free memory in MB as an integer."""
    return 0

def getCpuTemp():
    """Returns the current cpu temperature as an integer."""
    return 0

# xbmc/GUIInfoManager.cpp
def getInfoLabel(infotag):
    """Returns an InfoLabel as a string."""
    if infotag == 'System.BuildVersion':
        return "12.0"
    # string/number
    return ""

def getVideoInfoTag(self):
    """
        To get video info tag.
        Returns the VideoInfoTag of the current playing Movie.
        :return: Video info tag
        :raises Exception: If player is not playing a file or current file is not a movie file.
    """
    return InfoTagVideo()

def getInfoImage(infotag):
    """Returns a filename including path to the InfoImage's"""
    return ""

def playSFX(filename):
    """Plays a wav file by filename"""
    pass

def enableNavSounds(yesNo):
    """Enables/Disables nav sounds"""
    pass

def getCondVisibility(condition):
    """Returns True (1) or False (0) as a bool."""
    return False;

def getGlobalIdleTime():
    """Returns the elapsed idle time in seconds as an integer."""
    return 0

def getCacheThumbName(path):
    """Returns a thumb cache filename."""
    return ""

def makeLegalFilename(filename, fatX=None):
    """Returns a legal filename or path as a string."""
    return ""

#def translatePath(text):
#        pass#print "translatePath text =", text
#        pass
#xbmc.translatePath(os.path.join('special://home/addons/plugin.video.itv', 'lib'))
def translatePath(url, asURL=False):
    """Returns the translated path."""
    log("xbmc.translatePath(%s, asURL=%s)" % (url,str(asURL)))
    xurl = url
               
    if "special://home/addons/" in url:
        url = url.replace("special://home/addons/", xbmcE2.addons_path)
        pass#print "In xbmc url B=", url
        return url
    elif "special://" in url:
        n1 = url.find("//", 0)
        xurl = "media/hdd/.kodi" + url[(n1+1):]
    n2 = len(xurl)
    n3 = xurl.rfind("/", 0, n2)
    xpath = xurl[:n3]
    cmd = "mkdir -p " + xpath
    system(cmd)
    return xurl

def getCleanMovieTitle(path, usefoldername=None):
    """Returns a clean movie title and year string if available."""
    return ""


#play_m3u8 = xbmc.validatePath(xbmc.translatePath('special://home')+'/userdata/addon_data/plugin.video.laola1live/play.m3u8')

def validatePath(path):
    """Returns the validated path."""
    log("validatePath(%s)" % path)
    return path


        

def getRegion(id):
    """Returns your regions setting as a string for the specified id."""
    return ""

def getSupportedMedia(media):
    """Returns the supported file types for the specific media as a string."""
    return ""

def skinHasImage(image):
    """Returns True if the image file exists in the skin."""
    return False;

def subHashAndFileSize(file):
    """Calculate subtitle hash and size."""
    return ("0", "0")

# xbmc/interfaces/python/xbmcmodule/player.cpp
pass#pass#print "Here in xbmc-py B"
###mfaraj-start
class Keyboard:##activate the object to read the search term-mfaraj
    def __init__(self, default=None, heading=None, hidden=False):

        """Creates a new Keyboard object with default text heading and hidden input flag if supplied.

        default: string - default text entry.
        heading: string - keyboard heading.
        hidden: boolean - True for hidden text entry.

        Example:
            kb = xbmc.Keyboard('default', 'heading', True)
            kb.setDefault('password') # optional
            kb.setHeading('Enter password') # optional
            kb.setHiddenInput(True) # optional
            kb.doModal()
            if (kb.isConfirmed()):
                text = kb.getText()
        """
        pass#pass#print "In xbmc-py default =", default
#        pass

    def doModal(self, autoclose=0):
        """Show keyboard and wait for user action.

        autoclose: integer - milliseconds to autoclose dialog.

        Note:
            autoclose = 0 - This disables autoclose

        Example:
            kb.doModal(30000)
        """
        pass

    def setDefault(self, default):
        """Set the default text entry.

        default: string - default text entry.

        Example:
            kb.setDefault('password')
        """
        pass

    def setHiddenInput(self, hidden):
        """Allows hidden text entry.

        hidden: boolean - True for hidden text entry.

        Example:
            kb.setHiddenInput(True)
        """
        pass

    def setHeading(self, heading):
        """Set the keyboard heading.

        heading: string - keyboard heading.

        Example:
            kb.setHeading('Enter password')
        """
        pass

    def getText(self):
        """Returns the user input as a string.

        Note:
            This will always return the text entry even if you cancel the keyboard.
            Use the isConfirmed() method to check if user cancelled the keyboard.
        """
        ###mfaraj-start
        import os
        if os.path.exists('/tmp/xbmc_search.txt'): 
           file=open('/tmp/xbmc_search.txt',"r")
           str=file.read()
           file.close()
        else:
           str=None   
        ###mfaraj-end
        pass#pass#print "In xbmc-py str =", str
        return str

    def isConfirmed(self):
        """Returns False if the user cancelled the input."""
        return True

###mfaraj-end

class Player:
    def __init__(self, core=None):
        """Creates a new Player with as default the xbmc music playlist."""
        self.playlist = None
        self.playing = True;

        #dataA = listitem.data
    def play(self, url=None, listitem=None, playlist=None, windowed=None): #
        if not listitem is None:
            xbmcE2.writeState('xbmc', 'player', 'play', json.dumps(listitem.data))
        elif not url is None:
            itemData = {"label": None, "label2": None, "iconImage": None, "thumbnailImage": None, "type": "VIDEO", "streams": [],
                        "path": url
                       }
            xbmcE2.writeState('xbmc', 'player', 'play', json.dumps(itemData))
            

    def stop(self):
        """Stop playing."""
        pass

    def pause(self):
        """Pause playing."""
        pass

    def playnext(self):
        """Play next item in playlist."""
        pass

    def playprevious(self):
        """Play previous item in playlist."""
        pass

    def playselected(self):
        """Play a certain item from the current playlist."""
        pass

    def onPlayBackStarted(self):
        """onPlayBackStarted method."""
        pass

    def onPlayBackEnded(self):
        """onPlayBackEnded method."""
        pass

    def onPlayBackStopped(self):
        """onPlayBackStopped method."""
        pass

    def onPlayBackPaused(self):
        """onPlayBackPaused method."""
        pass

    def onPlayBackResumed(self):
        """onPlayBackResumed method."""
        pass

    def isPlaying(self):
        """returns True is xbmc is playing a file."""
        return self.playing

    def isPlayingAudio(self):
        """returns True is xbmc is playing an audio file."""
        return True

    def isPlayingVideo(self):
        """returns True if xbmc is playing a video."""
        return False

    def getPlayingFile(self):
        """returns the current playing file as a string."""
        pass

    def getVideoInfoTag(self):
        """returns the VideoInfoTag of the current playing Movie."""
        pass

    def getMusicInfoTag(self):
        """returns the MusicInfoTag of the current playing 'Song'."""
        pass

    def getTotalTime(self):
        """Returns the total time of the current playing media in"""
        return 0

    def getTime(self):
        """Returns the current time of the current playing media as fractional seconds."""
        # pretend to have played for 1 second
        if self.playing:
            self.playing = False
            return 1
        else:
            self.playing = True
            raise Exception("fake playback ended!")

    def seekTime(self):
        """Seeks the specified amount of time as fractional seconds."""
        pass

    def setSubtitles(self, path):
        """set subtitle file and enable subtitles"""
        pms.setSubtitles(path)

    def getSubtitles(self):
        """get subtitle stream name."""
        pass

    def showSubtitles(self, visible):
        """enable/disable subtitles"""
        pass

    def DisableSubtitles(self):
        """disable subtitles."""
        pass

    def getAvailableAudioStreams(self):
        """get Audio stream names."""
        pass

    def setAudioStream(self, stream):
        """set Audio Stream."""
        pass

    def getAvailableSubtitleStreams(self):
        """get Subtitle stream names."""
        pass

    def setSubtitleStream(self, stream):
        """set Subtitle Stream."""
        pass

# xbmc/interfaces/python/xbmcmodule/playlist.cpp
class ListItem:
    def __init__(self, label=None, label2=None, iconImage=None, thumbnailImage=None, path=None):
        self.data = {}
        self.data['label'] = label
        self.data['label2'] = label2
        self.data['iconImage'] = iconImage
        self.data['thumbnailImage'] = thumbnailImage
        self.data['path'] = path
        self.data['type'] = 'VIDEO'
        self.data['streams'] = []
        return

    def getLabel(self):
        """Returns the listitem label."""
        return self.data['label']

    def getLabel2(self):
        """Returns the listitem's second label."""
        return self.data['label2']

    def setLabel(self, label):
        """Sets the listitem's label."""
        self.data['label'] = label

    def setLabel2(self, label2):
        """Sets the listitem's second label."""
        self.data['label2'] = label2

    def setIconImage(self, icon):
        """Sets the listitem's icon image."""
        self.data['iconImage'] = icon

    def setThumbnailImage(self, thumb):
        """Sets the listitem's thumbnail image."""
        self.data['thumbnailImage'] = thumb

    def select(self, selected):
        """Sets the listitem's selected status."""
        pass

    def isSelected(self):
        """Returns the listitem's selected status."""
        return False

    def setInfo(self, type, infoLabels):
        """Sets the listitem's infoLabels."""
        self.data['type'] = type
        self.data.update(infoLabels)
        
    def setSubtitles(self, subs):
            pass

    def setProperty(self, key, value):
        """Sets a listitem property, similar to an infolabel."""
        self.data[key] = value

    def getProperty(self, key):
        """Returns a listitem property as a string, similar to an infolabel."""
        return (self.data[key] if key in self.data else None)

    def addContextMenuItems(self, items, replaceItems=None):
        """Adds item to the context menu for media lists."""
        pass

    def setPath(self, path):
        """Sets the listitem's path."""
        self.data['path'] = path

    def addStreamInfo(self, type, values):
        """Add a stream with details."""
        pass#print("*** addStreamInfo ***", [type, values])
##        values['type'] = type
##        self.data['streams'].append({k.lower():values[k] for k in values.keys()})
              

        def setArt(self, posters):
                pass

        def addStreamInfo(self, video, duration):
                pass


class PlayListItem(ListItem):

    def __init__(self, url=None, listitem=None):
        """Creates a new PlaylistItem which can be added to a PlayList."""
        ListItem.__init__(self)
        if listitem is not None:
            self.__dict__.update(listitem.__dict__)
        # url is sometimes 'False'
#                pass#print "Here in xbmc-py PlayListItem url =", url
        if url is not None and url:
            self.__dict__['path'] = url

    def getdescription(self):
        """Returns the description of this PlayListItem."""
        return getLabel()

    def getduration(self):
        """Returns the duration of this PlayListItem."""
        return 0

    def getfilename(self):
        """Returns the filename of this PlayListItem."""
        return self.__dict__['path']

class PlayList:
    def __init__(self, type):
        self.items = []
        self.type = type

    def PlayList(self, playlist):
        """retrieve a reference from a valid xbmc playlist."""
        pass

    def add(self, url, listitem=None, index=None):
        """Adds a new file to the playlist."""
#        pass#print "**** PlayList.add ****", url, '' if listitem is None else listitem.__dict__
        player = Player()
        player.play(url)



    def addXX(self, url, listitem=None, index=None):
        """Adds a new file to the playlist."""
#        pass#print "**** PlayList.add ****", url, '' if listitem is None else listitem.__dict__
        if not isinstance(url, list):
            url = [url]
        for u in url:
#                        pass#print "Here in xbmc-py u =", u
            item = PlayListItem(u, listitem)
#            pass#print "Here in xbmc-py item =", item
            if index is not None:
                self.items.insert(index, item)
                index += 1
            else:
                self.items.append(PlayListItem(u, item))
            xbmcplugin.setResolvedUrl(0, True, item)
#                pass#print "Here in xbmc-py self.items[0].getfilename() =", self.items[0].getfilename()

    def addX(self, url, listitem=None, index=None):
        """Adds a new file to the playlist."""
#        pass#print "**** PlayList.add ****", url, '' if listitem is None else listitem.__dict__
        if not isinstance(url, list):
            url = [url]
        for u in url:
#                        pass#print "Here in xbmc-py u =", u
                        u = u.replace("&", "AxNxD")
                        u = u.replace("=", "ExQ")
#                        data = "&url=" + u + "\n"
                        data = "url=" + u + "\n"
                        if os.path.exists("/etc/debugxb"):
                               pass#pass#print "xmbc data B=", data
                        file = open("/tmp/data.txt", "a")
                        file.write(data)
                        file.close()

    def load(self, filename):
        """Load a playlist."""
        pass

    def remove(self, filename):
        """remove an item with this filename from the playlist."""
#        pass#print "**** PlayList.remove ****"
        self.items.remove(filename)

    def clear(self):
        """clear all items in the playlist."""
        self.items = []

    def shuffle(self):
        """shuffle the playlist."""
        pass

    def unshuffle(self):
        """unshuffle the playlist."""
        pass

    def size(self):
        """returns the total number of PlayListItems in this playlist."""
        return len(self.items)

    def getposition(self):
        """returns the position of the current song in this playlist."""
        pass


# mock everything else

#from xbmcinit import mock

InfoTagMusic = None
####Keyboard = None
Monitor = None

RenderCapture = None



# xbmc/interfaces/Builtins.cpp
# http://wiki.xbmc.org/index.php?title=List_of_Built_In_Functions

def PlayMedia(media, isdir=False, preview=1, playoffset=0):
    """Play the specified media file (or playlist)"""
    #TODO: implement this properly
    Player().play(media)

def RunScript(script, *args):
    """Run the specified script"""
    cmd = [translatePath(script)]
    cmd.extend(args)
    cmd.append('&')
    pms.run(cmd)

#def StopScript(*args):
#    """Stop the script by ID or path, if running"""
#    pass

##if defined(TARGET_DARWIN)
#def RunAppleScript(*args):
#    """Run the specified AppleScript command"""
#    pass
##endif

#def RunPlugin(*args):
#    """Run the specified plugin"""
#    pass

#def RunAddon(*args):
#    """Run the specified plugin/script"""
#    pass

#def Extract(*args):
#    """Extracts the specified archive"""
#    pass


#def System_Exec(*args):
#    """Execute shell commands"""
#    pass

#def System_ExecWait(*args):
#    """Execute shell commands and freezes XBMC until shell is closed"""
#    pass

#System = mock()
#System.Exec = System_Exec
#System.ExecWait = System_ExecWait

#def Help():
#    """This help message"""
#    pass

#def Reboot():
#    """Reboot the system"""
#    pass

#def Restart():
#    """Restart the system (same as reboot)"""
#    pass

#def ShutDown():
#    """Shutdown the system"""
#    pass

#def Powerdown():
#    """Powerdown system"""
#    pass

#def Quit():
#    """Quit XBMC"""
#    pass

#def Hibernate():
#    """Hibernates the system"""
#    pass

#def Suspend():
#    """Suspends the system"""
#    pass

#def InhibitIdleShutdown():
#    """Inhibit idle shutdown"""
#    pass

#def AllowIdleShutdown():
#    """Allow idle shutdown"""
#    pass

#def RestartApp():
#    """Restart XBMC"""
#    pass

#def Minimize():
#    """Minimize XBMC"""
#    pass

#def Reset():
#    """Reset the system (same as reboot)"""
#    pass

#def Mastermode():
#    """Control master mode"""
#    pass

#def ActivateWindow(*args):
#    """Activate the specified window"""
#    pass

#def ActivateWindowAndFocus(*args):
#    """Activate the specified window and sets focus to the specified id"""
#    pass

#def ReplaceWindow(*args):
#    """Replaces the current window with the new one"""
#    pass

#def TakeScreenshot():
#    """Takes a Screenshot"""
#    pass

#def SlideShow(*args):
#    """Run a slideshow from the specified directory"""
#    pass

#def RecursiveSlideShow(*args):
#    """Run a slideshow from the specified directory, including all subdirs"""
#    pass

#def ReloadSkin():
#    """Reload XBMC's skin"""
#    pass

#def UnloadSkin():
#    """Unload XBMC's skin"""
#    pass

#def RefreshRSS():
#    """Reload RSS feeds from RSSFeeds.xml"""
#    pass

#def PlayerControl(*args):
#    """Control the music or video player"""
#    pass

#def Playlist.PlayOffset(*args):
#    """Start playing from a particular offset in the playlist"""
#    pass

#def Playlist.Clear():
#    """Clear the current playlist"""
#    pass

#def EjectTray():
#    """Close or open the DVD tray"""
#    pass

#def AlarmClock(*args):
#    """Prompt for a length of time and start an alarm clock"""
#    pass

#def CancelAlarm(*args):
#    """Cancels an alarm"""
#    pass

#def Action(*args):
#    """Executes an action for the active window (same as in keymap)"""
#    pass

#def Notification(*args):
#    """Shows a notification on screen, specify header, then message, and optionally time in milliseconds and a icon."""
#    pass

#def PlayDVD():
#    """Plays the inserted CD or DVD media from the DVD-ROM Drive!"""
#    pass

#def RipCD():
#    """Rip the currently inserted audio CD"""
#    pass

#def Skin.ToggleSetting(*args):
#    """Toggles a skin setting on or off"""
#    pass

#def Skin.SetString(*args):
#    """Prompts and sets skin string"""
#    pass

#def Skin.SetNumeric(*args):
#    """Prompts and sets numeric input"""
#    pass

#def Skin.SetPath(*args):
#    """Prompts and sets a skin path"""
#    pass

#def Skin.Theme(*args):
#    """Control skin theme"""
#    pass

#def Skin.SetImage(*args):
#    """Prompts and sets a skin image"""
#    pass

#def Skin.SetLargeImage(*args):
#    """Prompts and sets a large skin images"""
#    pass

#def Skin.SetFile(*args):
#    """Prompts and sets a file"""
#    pass

#def Skin.SetAddon(*args):
#    """Prompts and set an addon"""
#    pass

#def Skin.SetBool(*args):
#    """Sets a skin setting on"""
#    pass

#def Skin.Reset(*args):
#    """Resets a skin setting to default"""
#    pass

#def Skin.ResetSettings():
#    """Resets all skin settings"""
#    pass

#def Mute():
#    """Mute the player"""
#    pass

#def SetVolume(*args):
#    """Set the current volume"""
#    pass

#def Dialog.Close(*args):
#    """Close a dialog"""
#    pass

#def System.LogOff():
#    """Log off current user"""
#    pass

#def Resolution(*args):
#    """Change XBMC's Resolution"""
#    pass

#def SetFocus(*args):
#    """Change current focus to a different control id"""
#    pass

#def UpdateLibrary(*args):
#    """Update the selected library (music or video)"""
#    pass

#def CleanLibrary(*args):
#    """Clean the video/music library"""
#    pass

#def ExportLibrary(*args):
#    """Export the video/music library"""
#    pass

#def PageDown(*args):
#    """Send a page down event to the pagecontrol with given id"""
#    pass

#def PageUp(*args):
#    """Send a page up event to the pagecontrol with given id"""
#    pass

#def LastFM.Love():
#    """Add the current playing last.fm radio track to the last.fm loved tracks"""
#    pass

#def LastFM.Ban():
#    """Ban the current playing last.fm radio track"""
#    pass

#def Container.Refresh():
#    """Refresh current listing"""
#    pass

#def Container.Update():
#    """Update current listing. Send Container.Update(path,replace) to reset the path history"""
#    pass

#def Container.NextViewMode():
#    """Move to the next view type (and refresh the listing)"""
#    pass

#def Container.PreviousViewMode():
#    """Move to the previous view type (and refresh the listing)"""
#    pass

#def Container.SetViewMode(*args):
#    """Move to the view with the given id"""
#    pass

#def Container.NextSortMethod():
#    """Change to the next sort method"""
#    pass

#def Container.PreviousSortMethod():
#    """Change to the previous sort method"""
#    pass

#def Container.SetSortMethod(*args):
#    """Change to the specified sort method"""
#    pass

#def Container.SortDirection():
#    """Toggle the sort direction"""
#    pass

#def Control.Move(*args):
#    """Tells the specified control to 'move' to another entry specified by offset"""
#    pass

#def Control.SetFocus(*args):
#    """Change current focus to a different control id"""
#    pass

#def Control.Message(*args):
#    """Send a given message to a control within a given window"""
#    pass

#def SendClick(*args):
#    """Send a click message from the given control to the given window"""
#    pass

#def LoadProfile(*args):
#    """Load the specified profile (note; if locks are active it won't work)"""
#    pass

#def SetProperty(*args):
#    """Sets a window property for the current focused window/dialog (key,value)"""
#    pass

#def ClearProperty(*args):
#    """Clears a window property for the current focused window/dialog (key,value)"""
#    pass

#def PlayWith(*args):
#    """Play the selected item with the specified core"""
#    pass

#def WakeOnLan(*args):
#    """Sends the wake-up packet to the broadcast address for the specified MAC address"""
#    pass

#def Addon.Default.OpenSettings(*args):
#    """Open a settings dialog for the default addon of the given type"""
#    pass

#def Addon.Default.Set(*args):
#    """Open a select dialog to allow choosing the default addon of the given type"""
#    pass

#def Addon.OpenSettings(*args):
#    """Open a settings dialog for the addon of the given id"""
#    pass

#def UpdateAddonRepos():
#    """Check add-on repositories for updates"""
#    pass

#def UpdateLocalAddons():
#    """Check for local add-on changes"""
#    pass

#def ToggleDPMS():
#    """Toggle DPMS mode manually"""
#    pass

#def Weather.Refresh():
#    """Force weather data refresh"""
#    pass

#def Weather.LocationNext():
#    """Switch to next weather location"""
#    pass

#def Weather.LocationPrevious():
#    """Switch to previous weather location"""
#    pass

#def Weather.LocationSet(*args):
#    """Switch to given weather location (parameter can be 1-3)"""
#    pass

##if defined(HAS_LIRC) || defined(HAS_IRSERVERSUITE)
#def LIRC.Stop():
#    """Removes XBMC as LIRC client"""
#    pass

#def LIRC.Start():
#    """Adds XBMC as LIRC client"""
#    pass

#def LIRC.Send(*args):
#    """Sends a command to LIRC"""
#    pass
##endif

##ifdef HAS_LCD
#def LCD.Suspend():
#    """Suspends LCDproc"""
#    pass

#def LCD.Resume():
#    """Resumes LCDproc"""
#    pass
##endif

#def VideoLibrary.Search():
#    """Brings up a search dialog which will search the library"""
#    pass

#def ToggleDebug():
#    """Enables/disables debug mode"""
#    pass

#def StartPVRManager():
#    """(Re)Starts the PVR manager"""
#    pass

#def StopPVRManager():
#    """Stops the PVR manager"""
#    pass


class Monitor(object):
    """
       Monitor class.
    Monitor() -- Creates a new Monitor to notify addon about changes.
    """
    def abortRequested(self):
        pass
        
    def onAbortRequested(self):
        """
        Deprecated!
        """
        pass

    def waitForAbort(self):
        """
        waitForAbort() -- onAbortRequested method.
        Will be called when XBMC requests Abort
        """
        pass

    def onDatabaseUpdated(self, database):
        """
        Deprecated!
        """
        pass

    def onScreensaverActivated(self):
        """
        onScreensaverActivated() -- onScreensaverActivated method.
        Will be called when screensaver kicks in
        """
        pass

    def onScreensaverDeactivated(self):
        """
        onScreensaverDeactivated() -- onScreensaverDeactivated method.
        Will be called when screensaver goes off
        """
        pass

    def onSettingsChanged(self):
        """
        onSettingsChanged() -- onSettingsChanged method.
        Will be called when addon settings are changed
        """
        pass

    def onDatabaseScanStarted(self, database):
        """
        Deprecated!
        """
        pass

    def onNotification(self, sender, method, data):
        """
        onNotification(sender, method, data)--onNotification method.

        sender : sender of the notification
        method : name of the notification
        data : JSON-encoded data of the notification

        Will be called when XBMC receives or sends a notification
        """
        pass

    def onCleanStarted(self, library=''):
        """
        onCleanStarted(library)--onCleanStarted method.

        library : video/music as string

        Will be called when library clean has started
        and return video or music to indicate which library is being cleaned
        """
        pass

    def onCleanFinished(self, library=''):
        """
        onCleanFinished(library)--onCleanFinished method.

        library : video/music as string

        Will be called when library clean has ended
        and return video or music to indicate which library has been cleaned
        """
        pass

    def onDPMSActivated(self):
        """
        onDPMSActivated() --onDPMSActivated method.

        Will be called when energysaving/DPMS gets active
        """
        pass

    def onDPMSDeactivated(self):
        """
        onDPMSDeactivated() --onDPMSDeactivated method.

        Will be called when energysaving/DPMS is turned off
        """
        pass

    def onScanFinished(self, library=''):
        """
        onScanFinished(library)--onScanFinished method.

        library : video/music as string

        Will be called when library scan has ended
        and return video or music to indicate which library has been scanned
        """
        pass

    def onScanStarted(self, library=''):
        """
        onScanStarted(library)--onScanStarted method.

        library : video/music as string

        Will be called when library scan has started
        and return video or music to indicate which library is being scanned
        """
        pass

    def waitForAbort(self, timeout):
        """
        waitForAbort([timeout]) -- Block until abort is requested, or until timeout occurs. If an
        abort requested have already been made, return immediately.
        Returns True when abort have been requested, False if a timeout is given and the operation times out.

        :param timeout: float - (optional) timeout in seconds. Default: no timeout.
        :return: bool
        """
        return bool


class Actor:
    """
    **`Actor` class used in combination with `InfoTagVideo`.**

    Represents a single actor in the cast of a video item wrapped by `InfoTagVideo`.

    @python_v20 New class added.

    Example::

        ...
        actor = xbmc.Actor('Sean Connery', 'James Bond', order=1)
        ...
    """
    
    def __init__(self, name: str = "",
                 role: str = "",
                 order: int = -1,
                 thumbnail: str = "") -> None:
        pass
    
    def getName(self) -> str:
        """
        Get the name of the actor.

        :return: [string] Name of the actor

        @python_v20 New function added.
        """
        return ""
    
    def getRole(self) -> str:
        """
        Get the role of the actor in the specific video item.

        :return: [string] Role of the actor in the specific video item

        @python_v20 New function added.
        """
        return ""
    
    def getOrder(self) -> int:
        """
        Get the order of the actor in the cast of the specific video item.

        :return: [integer] Order of the actor in the cast of the specific video item

        @python_v20 New function added.
        """
        return 0
    
    def getThumbnail(self) -> str:
        """
        Get the path / URL to the thumbnail of the actor.

        :return: [string] Path / URL to the thumbnail of the actor

        @python_v20 New function added.
        """
        return ""
    
    def setName(self, name: str) -> None:
        """
        Set the name of the actor.

        :param name: string - Name of the actor.

        @python_v20 New function added.
        """
        pass
    
    def setRole(self, role: str) -> None:
        """
        Set the role of the actor in the specific video item.

        :param role: string - Role of the actor in the specific video item.

        @python_v20 New function added.
        """
        pass
    
    def setOrder(self, order: int) -> None:
        """
        Set the order of the actor in the cast of the specific video item.

        :param order: integer - Order of the actor in the cast of the specific video item.

        @python_v20 New function added.
        """
        pass
    
    def setThumbnail(self, thumbnail: str) -> None:
        """
        Set the path / URL to the thumbnail of the actor.

        :param thumbnail: string - Path / URL to the thumbnail of the actor.

        @python_v20 New function added.
        """
        pass

class VideoStreamDetail:
    """
    **Video stream details class used in combination with `InfoTagVideo`.**

    Represents a single selectable video stream for a video item wrapped
    by `InfoTagVideo`.

    @python_v20 New class added.

    Example::

        ...
        videostream = xbmc.VideoStreamDetail(1920, 1080, language='English')
        ...
    """
    
    def __init__(self, width: int = 0,
                 height: int = 0,
                 aspect: float = 0.0,
                 duration: int = 0,
                 codec: str = "",
                 stereomode: str = "",
                 language: str = "",
                 hdrtype: str = "") -> None:
        pass
    
    def getWidth(self) -> int:
        """
        Get the width of the video stream in pixel.

        :return: [integer] Width of the video stream

        @python_v20 New function added.
        """
        return 0
    
    def getHeight(self) -> int:
        """
        Get the height of the video stream in pixel.

        :return: [integer] Height of the video stream

        @python_v20 New function added.
        """
        return 0
    
    def getAspect(self) -> float:
        """
        Get the aspect ratio of the video stream.

        :return: [float] Aspect ratio of the video stream

        @python_v20 New function added.
        """
        return 0.0
    
    def getDuration(self) -> int:
        """
        Get the duration of the video stream in seconds.

        :return: [float] Duration of the video stream in seconds

        @python_v20 New function added.
        """
        return 0
    
    def getCodec(self) -> str:
        """
        Get the codec of the stream.

        :return: [string] Codec of the stream

        @python_v20 New function added.
        """
        return ""
    
    def getStereoMode(self) -> str:
        """
        Get the stereo mode of the video stream.

        :return: [string] Stereo mode of the video stream

        @python_v20 New function added.
        """
        return ""
    
    def getLanguage(self) -> str:
        """
        Get the language of the stream.

        :return: [string] Language of the stream

        @python_v20 New function added.
        """
        return ""
    
    def getHDRType(self) -> str:
        """
        Get the HDR type of the stream.

        :return: [string] HDR type of the stream

        @python_v20 New function added.
        """
        return ""
    
    def setWidth(self, width: int) -> None:
        """
        Set the width of the video stream in pixel.

        :param width: integer - Width of the video stream in pixel.

        @python_v20 New function added.
        """
        pass
    
    def setHeight(self, height: int) -> None:
        """
        Set the height of the video stream in pixel.

        :param height: integer - Height of the video stream in pixel.

        @python_v20 New function added.
        """
        pass
    
    def setAspect(self, aspect: float) -> None:
        """
        Set the aspect ratio of the video stream.

        :param aspect: float - Aspect ratio of the video stream.

        @python_v20 New function added.
        """
        pass
    
    def setDuration(self, duration: int) -> None:
        """
        Set the duration of the video stream in seconds.

        :param duration: integer - Duration of the video stream in seconds.

        @python_v20 New function added.
        """
        pass
    
    def setCodec(self, codec: str) -> None:
        """
        Set the codec of the stream.

        :param codec: string - Codec of the stream.

        @python_v20 New function added.
        """
        pass
    
    def setStereoMode(self, stereomode: str) -> None:
        """
        Set the stereo mode of the video stream.

        :param stereomode: string - Stereo mode of the video stream.

        @python_v20 New function added.
        """
        pass
    
    def setLanguage(self, language: str) -> None:
        """
        Set the language of the stream.

        :param language: string - Language of the stream.

        @python_v20 New function added.
        """
        pass
    
    def setHDRType(self, hdrtype: str) -> None:
        """
        Set the HDR type of the stream.

        :param hdrtype: string - HDR type of the stream. The following types are supported:
            dolbyvision, hdr10, hlg

        @python_v20 New function added.
        """
        pass

class AudioStreamDetail:
    """
    **Audio stream details class used in combination with `InfoTagVideo`.**

    Represents a single selectable audio stream for a video item wrapped
    by `InfoTagVideo`.

    @python_v20 New class added.

    Example::

        ...
        audiostream = xbmc.AudioStreamDetail(6, 'DTS', 'English')
        ...
    """
    
    def __init__(self, channels: int = -1,
                 codec: str = "",
                 language: str = "") -> None:
        pass
    
    def getChannels(self) -> int:
        """
        Get the number of channels in the stream.

        :return: [integer] Number of channels in the stream

        @python_v20 New function added.
        """
        return 0
    
    def getCodec(self) -> str:
        """
        Get the codec of the stream.

        :return: [string] Codec of the stream

        @python_v20 New function added.
        """
        return ""
    
    def getLanguage(self) -> str:
        """
        Get the language of the stream.

        :return: [string] Language of the stream

        @python_v20 New function added.
        """
        return ""
    
    def setChannels(self, channels: int) -> None:
        """
        Set the number of channels in the stream.

        :param channels: integer - Number of channels in the stream.

        @python_v20 New function added.
        """
        pass
    
    def setCodec(self, codec: str) -> None:
        """
        Set the codec of the stream.

        :param codec: string - Codec of the stream.

        @python_v20 New function added.
        """
        pass
    
    def setLanguage(self, language: str) -> None:
        """
        Set the language of the stream.

        :param language: string - Language of the stream.

        @python_v20 New function added.
        """
        pass

class SubtitleStreamDetail:
    """
    **Subtitle stream details class used in combination with `InfoTagVideo`.**

    Represents a single selectable subtitle stream for a video item wrapped
    by `InfoTagVideo`.

    @python_v20 New class added.

    Example::

        ...
        subtitlestream = xbmc.SubtitleStreamDetail('English')
        ...
    """
    
    def __init__(self, language: str = "") -> None:
        pass
    
    def getLanguage(self) -> str:
        """
        Get the language of the stream.

        :return: [string] Language of the stream

        @python_v20 New function added.
        """
        return ""
    
    def setLanguage(self, language: str) -> None:
        """
        Set the language of the stream.

        :param language: string - Language of the stream.

        @python_v20 New function added.
        """
        pass

class InfoTagVideo:
    """
    **Kodi's video info tag class.**

    Access and / or modify the video metadata of a ListItem.

    Example::

        ...
        tag = xbmc.Player().getVideoInfoTag()
        
        title = tag.getTitle()
        file  = tag.getFile()
        ...
    """
    
    def __init__(self, offscreen: bool = False) -> None:
        pass
    
    def getDbId(self) -> int:
        """
        Get identification number of tag in database

        :return: [integer] database id

        @python_v17 New function added.
        """
        return 0
    
    def getDirector(self) -> str:
        """
        Getfilm director who has made the film (if present).

        :return: [string] Film director name.

        @python_v20 Deprecated. Use **`getDirectors()`** instead.
        """
        return ""
    
    def getDirectors(self): #j00zek -> List[str]:
        """
        Get a list offilm directors who have made the film (if present).

        :return: [list]`List` of film director names.

        @python_v20 New function added.
        """
        return [""]
    
    def getWritingCredits(self) -> str:
        """
        Get the writing credits if present from video info tag.

        :return: [string] Writing credits

        @python_v20 Deprecated. Use **`getWriters()`** instead.
        """
        return ""
    
    def getWriters(self): #j00zek -> List[str]:
        """
        Get the list of writers (if present) from video info tag.

        :return: [list] `List` of writers

        @python_v20 New function added.
        """
        return [""]
    
    def getGenre(self) -> str:
        """
        To get theVideo Genre if available.

        :return: [string] Genre name

        @python_v20 Deprecated. Use **`getGenres()`** instead.
        """
        return ""
    
    def getGenres(self): #j00zek -> List[str]:
        """
        Get the list ofVideo Genres if available.

        :return: [list]`List` of genres

        @python_v20 New function added.
        """
        return [""]
    
    def getTagLine(self) -> str:
        """
        Get video tag line if available.

        :return: [string] Video tag line
        """
        return ""
    
    def getPlotOutline(self) -> str:
        """
        Get the outline plot of the video if present.

        :return: [string] Outline plot
        """
        return ""
    
    def getPlot(self) -> str:
        """
        Get the plot of the video if present.

        :return: [string] Plot
        """
        return ""
    
    def getPictureURL(self) -> str:
        """
        Get a picture URL of the video to show as screenshot.

        :return: [string] Picture URL
        """
        return ""
    
    def getTitle(self) -> str:
        """
        Get the video title.

        :return: [string] Video title
        """
        return ""
    
    def getTVShowTitle(self) -> str:
        """
        Get the video TV show title.

        :return: [string] TV show title

        @python_v17 New function added.
        """
        return ""
    
    def getMediaType(self) -> str:
        """
        Get the media type of the video.

        :return: [string] media type

        Available strings about media type for video:

        ========== ====================================
        String     Description
        ========== ====================================
        video      For normal video
        set        For a selection of video
        musicvideo To define it as music video
        movie      To define it as normal movie
        tvshow     If this is it defined as tvshow
        season     The type is used as a series season
        episode    The type is used as a series episode
        ========== ====================================

        @python_v17 New function added.
        """
        return ""
    
    def getVotes(self) -> str:
        """
        Get the video votes if available from video info tag.

        :return: [string] Votes

        @python_v20 Deprecated. Use **`getVotesAsInt()`** instead.
        """
        return ""
    
    def getVotesAsInt(self, type: str = "") -> int:
        """
        Get the votes of the rating (if available) as an integer.

        :param type: [opt] string - the type of the rating.  Some rating type values (any
            string possible):

        ===== ==================
        Label Type
        ===== ==================
        imdb  string - type name
        tvdb  string - type name
        tmdb  string - type name
        anidb string - type name
        ===== ==================

        :return: [integer] Votes

        @python_v20 New function added.
        """
        return 0
    
    def getCast(self) -> str:
        """
        To get the cast of the video when available.

        :return: [string] Video casts

        @python_v20 Deprecated. Use **`getActors()`** instead.
        """
        return ""
    
    def getActors(self): #j00zek -> List[Actor]:
        """
        Get the cast of the video if available.

        :return: [list]`List` of actors

        @python_v20 New function added.
        """
        return [Actor()]
    
    def getFile(self) -> str:
        """
        To get the video file name.

        :return: [string] File name
        """
        return ""
    
    def getPath(self) -> str:
        """
        To get the path where the video is stored.

        :return: [string] Path
        """
        return ""
    
    def getFilenameAndPath(self) -> str:
        """
        To get the full path with filename where the video is stored.

        :return: [string] File name and Path

        @python_v19 New function added.
        """
        return ""
    
    def getIMDBNumber(self) -> str:
        """
        To get theIMDb number of the video (if present).

        :return: [string] IMDb number
        """
        return ""
    
    def getSeason(self) -> int:
        """
        To get season number of a series

        :return: [integer] season number

        @python_v17 New function added.
        """
        return 0
    
    def getEpisode(self) -> int:
        """
        To get episode number of a series

        :return: [integer] episode number

        @python_v17 New function added.
        """
        return 0
    
    def getYear(self) -> int:
        """
        Get production year of video if present.

        :return: [integer] Production Year
        """
        return 0
    
    def getRating(self, type: str = "") -> float:
        """
        Get the video rating if present as float (double where supported).

        :param type: [opt] string - the type of the rating.  Some rating type values (any
            string possible):

        ===== ==================
        Label Type
        ===== ==================
        imdb  string - type name
        tvdb  string - type name
        tmdb  string - type name
        anidb string - type name
        ===== ==================

        :return: [float] The rating of the video

        @python_v20 Optional ``type`` parameter added.
        """
        return 0.0
    
    def getUserRating(self) -> int:
        """
        Get the user rating if present as integer.

        :return: [integer] The user rating of the video
        """
        return 0
    
    def getPlayCount(self) -> int:
        """
        To get the number of plays of the video.

        :return: [integer] Play Count
        """
        return 0
    
    def getLastPlayed(self) -> str:
        """
        Get the last played date / time as string.

        :return: [string] Last played date / time

        @python_v20 Deprecated. Use **`getLastPlayedAsW3C()`** instead.
        """
        return ""
    
    def getLastPlayedAsW3C(self) -> str:
        """
        Get last played datetime as string in W3C format (YYYY-MM-DDThh:mm:ssTZD).

        :return: [string] Last played datetime (W3C)

        @python_v20 New function added.
        """
        return ""
    
    def getOriginalTitle(self) -> str:
        """
        To get the original title of the video.

        :return: [string] Original title
        """
        return ""
    
    def getPremiered(self) -> str:
        """
        To getpremiered date of the video, if available.

        :return: [string]

        @python_v20 Deprecated. Use **`getPremieredAsW3C()`** instead.
        """
        return ""
    
    def getPremieredAsW3C(self) -> str:
        """
        Getpremiered date as string in W3C format (YYYY-MM-DD).

        :return: [string] Premiered date (W3C)

        @python_v20 New function added.
        """
        return ""
    
    def getFirstAired(self) -> str:
        """
        Returns first aired date as string from info tag.

        :return: [string] First aired date

        @python_v20 Deprecated. Use **`getFirstAiredAsW3C()`** instead.
        """
        return ""
    
    def getFirstAiredAsW3C(self) -> str:
        """
        Get first aired date as string in W3C format (YYYY-MM-DD).

        :return: [string] First aired date (W3C)

        @python_v20 New function added.
        """
        return ""
    
    def getTrailer(self) -> str:
        """
        To get the path where the trailer is stored.

        :return: [string] Trailer path

        @python_v17 New function added.
        """
        return ""
    
    def getArtist(self): #j00zek -> List[str]:
        """
        To get the artist name (for musicvideos)

        :return: [List[str]] Artist name

        @python_v18 New function added.
        """
        return [""]
    
    def getAlbum(self) -> str:
        """
        To get the album name (for musicvideos)

        :return: [string] Album name

        @python_v18 New function added.
        """
        return ""
    
    def getTrack(self) -> int:
        """
        To get the track number (for musicvideos)

        :return: [int] Track number

        @python_v18 New function added.
        """
        return 0
    
    def getDuration(self) -> int:
        """
        To get the duration

        :return: [unsigned int] Duration

        @python_v18 New function added.
        """
        return 0
    
    def getResumeTime(self) -> float:
        """
        Gets the resume time of the video item.

        :return: [double] Resume time

        @python_v20 New function added.
        """
        return 0.0

    def getResumeTimeTotal(self) -> float:
        """
        Gets the total duration stored with the resume time of the video item.

        :return: [double] Total duration stored with the resume time

        @python_v20 New function added.
        """
        return 0.0

    def getUniqueID(self, key: str) -> str:
        """
        Get the unique ID of the given key. A unique ID is an identifier used by a
        (online) video database used to identify a video in its database.

        :param key: string - uniqueID name.  Some default uniqueID values (any string
            possible):

        ===== ======================
        Label Type
        ===== ======================
        imdb  string - uniqueid name
        tvdb  string - uniqueid name
        tmdb  string - uniqueid name
        anidb string - uniqueid name
        ===== ======================

        @python_v20 New function added.
        """
        return ""

    def setUniqueID(self, uniqueid: str,
                    type: str = "",
                    isdefault: bool = False) -> None:
        """
        Set the given unique ID. A unique ID is an identifier used by a (online) video
        database used to identify a video in its database.

        :param uniqueid: string - value of the unique ID.
        :param type: [opt] string - type / label of the unique ID.
        :param isdefault: [opt] bool - whether the given unique ID is the default unique ID.

        @python_v20 New function added.
        """
        pass

    def setUniqueIDs(self, uniqueIDs: Dict[str, str],
                     defaultuniqueid: str = "") -> None:
        """
        Set the given unique IDs. A unique ID is an identifier used by a (online) video
        database used to identify a video in its database.

        :param values: dictionary - pairs of{ 'label: 'value' }`.
        :param defaultuniqueid: [opt] string - the name of default uniqueID.

        Some example values (any string possible):

        ===== ======================
        Label Type
        ===== ======================
        imdb  string - uniqueid name
        tvdb  string - uniqueid name
        tmdb  string - uniqueid name
        anidb string - uniqueid name
        ===== ======================

        @python_v20 New function added.
        """
        pass

    def setDbId(self, dbid: int) -> None:
        """
        Set the database identifier of the video item.

        :param dbid: integer - Database identifier.

        @python_v20 New function added.
        """
        pass

    def setYear(self, year: int) -> None:
        """
        Set the year of the video item.

        :param year: integer - Year.

        @python_v20 New function added.
        """
        pass
    
    def setEpisode(self, episode: int) -> None:
        """
        Set the episode number of the episode.

        :param episode: integer - Episode number.

        @python_v20 New function added.
        """
        pass
    
    def setSeason(self, season: int) -> None:
        """
        Set the season number of the video item.

        :param season: integer - Season number.

        @python_v20 New function added.
        """
        pass

    def setSortEpisode(self, sortepisode: int) -> None:
        """
        Set the episode sort number of the episode.

        :param sortepisode: integer - Episode sort number.

        @python_v20 New function added.
        """
        pass

    def setSortSeason(self, sortseason: int) -> None:
        """
        Set the season sort number of the season.

        :param sortseason: integer - Season sort number.
        @python_v20 New function added.
        """
        pass

    def setEpisodeGuide(self, episodeguide: str) -> None:
        """
        Set the episode guide of the video item.

        :param episodeguide: string - Episode guide.

        @python_v20 New function added.
        """
        pass

    def setTop250(self, top250: int) -> None:
        """
        Set the top 250 number of the video item.

        :param top250: integer - Top 250 number.

        @python_v20 New function added.
        """
        pass

    def setSetId(self, setid: int) -> None:
        """
        Set the movie set identifier of the video item.

        :param setid: integer - Set identifier.

        @python_v20 New function added.
        """
        pass

    def setTrackNumber(self, tracknumber: int) -> None:
        """
        Set the track number of the music video item.

        :param tracknumber: integer - Track number.

        @python_v20 New function added.
        """
        pass

    def setRating(self, rating: float,
                  votes: int = 0,
                  type: str = "",
                  isdefault: bool = False) -> None:
        """
        Set the rating of the video item.

        :param rating: float - Rating number.
        :param votes: integer - Number of votes.
        :param type: string - Type of the rating.
        :param isdefault: bool - Whether the rating is the default or not.

        @python_v20 New function added.
        """
        pass

    def setRatings(self, ratings: Dict[str, Tuple[float, int]],
                   defaultrating: str = "") -> None:
        """
        Set the ratings of the video item.

        :param ratings: dictionary -{ 'type: (rating, votes) }`.
        :param defaultrating: string - Type / Label of the default rating.

        @python_v20 New function added.
        """
        pass

    def setUserRating(self, userrating: int) -> None:
        """
        Set the user rating of the video item.

        :param userrating: integer - User rating.

        @python_v20 New function added.
        """
        pass

    def setPlaycount(self, playcount: int) -> None:
        """
        Set the playcount of the video item.

        :param playcount: integer - Playcount.

        @python_v20 New function added.
        """
        pass

    def setMpaa(self, mpaa: str) -> None:
        """
        Set the MPAA rating of the video item.

        :param mpaa: string - MPAA rating.

        @python_v20 New function added.
        """
        pass

    def setPlot(self, plot: str) -> None:
        """
        Set the plot of the video item.

        :param plot: string - Plot.

        @python_v20 New function added.
        """
        pass

    def setPlotOutline(self, plotoutline: str) -> None:
        """
        Set the plot outline of the video item.

        :param plotoutline: string - Plot outline.

        @python_v20 New function added.
        """
        pass

    def setTitle(self, title: str) -> None:
        """
        Set the title of the video item.

        :param title: string - Title.

        @python_v20 New function added.
        """
        pass

    def setOriginalTitle(self, originaltitle: str) -> None:
        """
        Set the original title of the video item.

        :param originaltitle: string - Original title.

        @python_v20 New function added.
        """
        pass

    def setSortTitle(self, sorttitle: str) -> None:
        """
        Set the sort title of the video item.

        :param sorttitle: string - Sort title.

        @python_v20 New function added.
        """
        pass

    def setTagLine(self, tagline: str) -> None:
        """
        Set the tagline of the video item.

        :param tagline: string - Tagline.

        @python_v20 New function added.
        """
        pass

    def setTvShowTitle(self, tvshowtitle: str) -> None:
        """
        Set the TV show title of the video item.

        :param tvshowtitle: string - TV show title.

        @python_v20 New function added.
        """
        pass

    def setTvShowStatus(self, status: str) -> None:
        """
        Set the TV show status of the video item.

        :param status: string - TV show status.

        @python_v20 New function added.
        """
        pass

    def setGenres(self, genre: List[str]) -> None:
        """
        Set the genres of the video item.

        :param genre: list - Genres.

        @python_v20 New function added.
        """
        pass

    def setCountries(self, countries: List[str]) -> None:
        """
        Set the countries of the video item.

        :param countries: list - Countries.

        @python_v20 New function added.
        """
        pass

    def setDirectors(self, directors: List[str]) -> None:
        """
        Set the directors of the video item.

        :param directors: list - Directors.

        @python_v20 New function added.
        """
        pass

    def setStudios(self, studios: List[str]) -> None:
        """
        Set the studios of the video item.

        :param studios: list - Studios.

        @python_v20 New function added.
        """
        pass

    def setWriters(self, writers: List[str]) -> None:
        """
        Set the writers of the video item.

        :param writers: list - Writers.
        @python_v20 New function added.
        """
        pass

    def setDuration(self, duration: int) -> None:
        """
        Set the duration of the video item.

        :param duration: integer - Duration in seconds.

        @python_v20 New function added.
        """
        pass

    def setPremiered(self, premiered: str) -> None:
        """
        Set the premiere date of the video item.

        :param premiered: string - Premiere date.

        @python_v20 New function added.
        """
        pass

    def setSet(self, set: str) -> None:
        """
        Set the movie set (name) of the video item.

        :param set: string - Movie set (name).

        @python_v20 New function added.
        """
        pass

    def setSetOverview(self, setoverview: str) -> None:
        """
        Set the movie set overview of the video item.

        :param setoverview: string - Movie set overview.

        @python_v20 New function added.
        """
        pass

    def setTags(self, tags: List[str]) -> None:
        """
        Set the tags of the video item.

        :param tags: list - Tags.

        @python_v20 New function added.
        """
        pass

    def setProductionCode(self, productioncode: str) -> None:
        """
        Set the production code of the video item.

        :param productioncode: string - Production code.

        @python_v20 New function added.
        """
        pass

    def setFirstAired(self, firstaired: str) -> None:
        """
        Set the first aired date of the video item.

        :param firstaired: string - First aired date.

        @python_v20 New function added.
        """
        pass

    def setLastPlayed(self, lastplayed: str) -> None:
        """
        Set the last played date of the video item.

        :param lastplayed: string - Last played date (YYYY-MM-DD HH:MM:SS).

        @python_v20 New function added.
        """
        pass

    def setAlbum(self, album: str) -> None:
        """
        Set the album of the video item.

        :param album: string - Album.

        @python_v20 New function added.
        """
        pass

    def setVotes(self, votes: int) -> None:
        """
        Set the number of votes of the video item.

        :param votes: integer - Number of votes.

        @python_v20 New function added.
        """
        pass

    def setTrailer(self, trailer: str) -> None:
        """
        Set the trailer of the video item.

        :param trailer: string - Trailer.

        @python_v20 New function added.
        """
        pass

    def setPath(self, path: str) -> None:
        """
        Set the path of the video item.

        :param path: string - Path.

        @python_v20 New function added.
        """
        pass

    def setFilenameAndPath(self, filenameandpath: str) -> None:
        """
        Set the filename and path of the video item.

        :param filenameandpath: string - Filename and path.

        @python_v20 New function added.
        """
        pass

    def setIMDBNumber(self, imdbnumber: str) -> None:
        """
        Set the IMDb number of the video item.

        :param imdbnumber: string - IMDb number.

        @python_v20 New function added.
        """
        pass

    def setDateAdded(self, dateadded: str) -> None:
        """
        Set the date added of the video item.

        :param dateadded: string - Date added (YYYY-MM-DD HH:MM:SS).

        @python_v20 New function added.
        """
        pass

    def setMediaType(self, mediatype: str) -> None:
        """
        Set the media type of the video item.

        :param mediatype: string - Media type.

        @python_v20 New function added.
        """
        pass

    def setShowLinks(self, showlinks: List[str]) -> None:
        """
        Set the TV show links of the movie.

        :param showlinks: list - TV show links.

        @python_v20 New function added.
        """
        pass

    def setArtists(self, artists: List[str]) -> None:
        """
        Set the artists of the music video item.

        :param artists: list - Artists.

        @python_v20 New function added.
        """
        pass

    def setCast(self, actors: List[Actor]) -> None:
        """
        Set the cast / actors of the video item.

        :param actors: list - Cast / Actors.

        @python_v20 New function added.
        """
        pass

    def setResumePoint(self, time: float, totaltime: float = 0.0) -> None:
        """
        Set the resume point of the video item.

        :param time: float - Resume point in seconds.
        :param totaltime: float - Total duration in seconds.

        @python_v20 New function added.
        """
        pass

    def addSeason(self, number: int, name: str = "") -> None:
        """
        Add a season with name. It needs at least the season number.

        :param number: int - the number of the season.
        :param name: string - the name of the season. Default "".

        @python_v20 New function added.

        Example::

            ...
            # addSeason(number, name))
            infotagvideo.addSeason(1, "Murder House")
            ...
        """
        pass

    def addSeasons(self, namedseasons: List[Tuple[int, str]]) -> None:
        """
        Add named seasons to the TV show.

        :param namedseasons: list -``[ (season, name) ]``.

        @python_v20 New function added.
        """
        pass

    def addVideoStream(self, stream: VideoStreamDetail) -> None:
        """
        Add a video stream to the video item.

        :param stream: `VideoStreamDetail` - Video stream.

        @python_v20 New function added.
        """
        pass

    def addAudioStream(self, stream: AudioStreamDetail) -> None:
        """
        Add an audio stream to the video item.

        :param stream: `AudioStreamDetail` - Audio stream.

        @python_v20 New function added.
        """
        pass

    def addSubtitleStream(self, stream: SubtitleStreamDetail) -> None:
        """
        Add a subtitle stream to the video item.

        :param stream: `SubtitleStreamDetail` - Subtitle stream.

        @python_v20 New function added.
        """
        pass
